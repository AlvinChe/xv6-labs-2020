1.问答

1.1 Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
哪些寄存器包含函数的参数?例如，哪个寄存器在main调用toprintf中保存13？
a0 保存了函数返回值
A1,a2,保存了函数的参数
a2保存了13


1.2 Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
	在main函数的汇编代码中哪里调用了函数f，哪里调用了函数g
Asm代码中没有出现函数调用，而是直接传递了数值结果

1.3 At what address is the function printf located?
	printf函数的地址在哪里
jalr	1528(ra) # 628 <printf>

1.4 What value is in the register ra just after the jalr to printf in main?
	main函数中的ra寄存器在printf的jarl之后是什么
0x0

1.5Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output?The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
输出结果是什么，输出结果依赖于大端小端。如果大端结果是什么
He110 World
因为hex(57616)= 0xe110



1.6 In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);
输出结果是什么，为什么？
x=3 y=0


2. Backtrace
2.1  在kernel/defs.h中添加一行
void 			backtrace(void);
2.2  在kernel/riscv.h添加:
static inline uint64
r_fp()
{
  uint64 x;
  asm volatile("mv %0, s0" : "=r" (x) );
  return x;
}
2.3 根据提示在kernel/printf中写backtrace的代码
2.4 在kernel的sysproc.c的sys_sleep函数和kernel的printf的panic中添加backtrace函数的调用
2.5 运行qemu，在其中输入bttest，得到结果。


时间：2021年04月25日20:09:16

3.Alarm
 3.1 在makefile中添加user/alarmtest.c 
 	 在MAkefile的176行添加$U/_alarmtest

 3.2 添加系统调用added sigalarm and sigreturn system calls
	The right declarations to put in user/user.h are:
	    int sigalarm(int ticks, void (*handler)());
	    int sigreturn(void);
	Update user/usys.pl (which generates user/usys.S), 39行
	添加两个entry

	kernel/syscall.h, 
	添加两个SYS_call


	and kernel/syscall.c 
	添加对应的映射

	然后再kernel/sysproc.c中完成实现
	store the alarm interval and the pointer to the handler function in new fields in the proc structure (in kernel/proc.h).

	先在kernel/proc.h中添加数据结构，包括handler和interval
	再实现kernel/sysproc.c中的两个函数


	You can initialize proc fields in allocproc() in proc.c.
	初始化proc的total——ticks

	Every tick, the hardware clock forces an interrupt, which is handled in usertrap() in kernel/trap.c.

测试一直不通过
不知道怎么办才好
其实没有理清楚终端的代码机制

三个月一过也忘记了怎么提交git
修改.git/config
原地址的url = git://g.csail.mit.edu/xv6-labs-2020
     url = git://g.csail.mit.edu/xv6-labs-2020
修改成自己的仓库地址
修改完成后
git add .
git commit -m ""
git push 
然后就成功了

